[build-system]  # https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]  # https://python-poetry.org/docs/pyproject/
name = "wakabi"
version = "0.1.0"
description = "Description for `wakabi`"
readme = "README.md"
authors = ["WinnerOK <danman339@gmail.com>"]
repository = "https://github.com/WinnerOK/wakabi"
homepage = "https://github.com/WinnerOK/wakabi"

[tool.poetry.dependencies]  # https://python-poetry.org/docs/dependency-specification/
python = "^3.9"
pytelegrambotapi = "^4.14.0"

[tool.poetry.group.dev.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
black = "^23.9.1"
mypy = "^1.5.1"
pre-commit = "^3.4.0"
pytest = "^7.4.2"
coverage = "^7.3.1"
safety = "^2.3.5"
typeguard = "^4.1.5"
ruff = "^0.0.291"

[tool.black]  # https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
target-version = ["py39"]
line-length = 88
color = true

[tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
junit_xml = "reports/mypy.xml"
python_version = "3.9"
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
show_traceback = true
color_output = true
# Uncomment this if you are using pydantic
#plugins = [
#  "pydantic.mypy"
#]

strict = false  # https://mypy.readthedocs.io/en/stable/existing_code.html#introduce-stricter-options
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Uncomment this if you are using pydantic
#[tool.pydantic-mypy]
## https://pydantic-docs.helpmanual.io/mypy_plugin/#configuring-the-plugin
#init_forbid_extra = true
#init_typed = true
#warn_required_dynamic_aliases = true
#warn_untyped_fields = true

[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
filterwarnings = ["error", "ignore::DeprecationWarning", "ignore::ImportWarning"]
testpaths = ["wakabi", "tests"]
xfail_strict = true

# Extra options:
addopts = [
  "--color=yes",
  "--failed-first",
  "--strict-config",
  "--strict-markers",
  "--tb=short",
  "--verbosity=2",
  "--doctest-modules",
  "--doctest-continue-on-failure",
  "--typeguard-packages=wakabi",
  "--junitxml=reports/pytest.xml"
]

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html#run
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["wakabi"]

[tool.coverage.report]  # https://coverage.readthedocs.io/en/latest/config.html#report
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/config.html#xml
output = "reports/coverage.xml"

[tool.pylint.basic]
class-attribute-naming-style = "any"
class-const-naming-style = "any"
good-names=["i", "j", "k", "e", "x", "id", "_", "pk"]

[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.ruff]  # https://github.com/charliermarsh/ruff
ignore-init-module-imports = true
line-length = 100
select = ["ALL"]
ignore = [
  "TD", # flake8-todos
  "FIX", # flake8-fixme
  "ANN",  # flake8-annotations (handled by mypy)
  "E501", # pycodestyle - line too long (handled by black)
  "D100", # pydocstyle - Missing docstring in public module
  "D101", # pydocstyle - Missing docstring in public class
  "D102", # pydocstyle - Missing docstring in public method
  "D103", # pydocstyle - Missing docstring in public function
  "D104", # pydocstyle - Missing docstring in public package
  "D105", # pydocstyle - Missing docstring in magic method
  "D106", # pydocstyle - Missing docstring in public nested class
  "D107", # pydocstyle - Missing docstring in __init__
]
unfixable = [
  "F", # pyflakes
  "ERA", # eradicate - commented-out code
]
target-version = "py39"

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101", # Use of assert detected (assert allowed in tests)
    "PLR2004", # Magic value used in comparison
    "RUF001", # String contains ambiguous letter
]

[tool.ruff.flake8-tidy-imports]  # https://docs.astral.sh/ruff/settings/#flake8-tidy-imports
ban-relative-imports = "all"

[tool.ruff.isort]  # https://docs.astral.sh/ruff/settings/#isort
section-order = ["future", "typing", "standard-library", "third-party", "first-party", "local-folder"]
lines-between-types = 1

[tool.ruff.isort.sections]
"typing" = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]

[tool.ruff.pycodestyle]  # https://docs.astral.sh/ruff/settings/#pycodestyle
max-doc-length = 100

[tool.ruff.pydocstyle]  # https://docs.astral.sh/ruff/settings/#pydocstyle
convention = "google"

[tool.ruff.pylint]  # https://docs.astral.sh/ruff/settings/#pylint
allow-magic-value-types = ["int", "str", "bytes"]
max-args = 10
max-statements = 30
